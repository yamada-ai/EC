openapi: 3.0.0
info:
  title: E-commerce BFF API
  version: 1.0.0
  description: API for frontend to interact with backend services

paths:
  /users/register:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /users/logout:
    post:
      summary: Logout a user
      responses:
        '200':
          description: User logged out

  /users/{userId}:
    get:
      summary: Get user information
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user information
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /items:
    get:
      summary: Get list of items
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemAllResponse'

  /items/{itemType}:
    get:
      summary: Get item details
      parameters:
        - in: path
          name: itemType
          schema:
            type: string
          required: true
          description: Item type
      responses:
        '200':
          description: Item details retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemTypeResponse'

  /items/{itemType}/{itemId}:
    get:
      summary: Get item details
      parameters:
        - in: path
          name: itemType
          schema:
            type: string
          required: true
          description: Item ID
        - in: path
          name: itemId
          schema:
            type: integer
          required: true
          description: Item ID
      responses:
        '200':
          description: Item details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDetailResponse'

  /inventory:
    get:
      summary: Get inventory list
      responses:
        '200':
          description: List of inventory
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'

  /inventory/{itemId}/{itemType}:
    get:
      summary: Get inventory for a specific item
      parameters:
        - in: path
          name: itemId
          schema:
            type: integer
          required: true
          description: Item ID
        - in: path
          name: itemType
          schema:
            type: string
          required: true
          description: Item type (top, bottom, set)
      responses:
        '200':
          description: Inventory details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'

  /orders:
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{userId}:
    get:
      summary: Get order history for a user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '200':
          description: List of orders retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /orders/{orderId}/status:
    put:
      summary: Update order status
      parameters:
        - in: path
          name: orderId
          schema:
            type: integer
          required: true
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
      responses:
        '200':
          description: Order status updated

  /payment-methods:
    get:
      summary: Get list of payment methods
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'

  /payment-methods/{paymentMethodId}:
    put:
      summary: Update a payment method
      parameters:
        - in: path
          name: paymentMethodId
          schema:
            type: integer
          required: true
          description: Payment method ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
      responses:
        '200':
          description: Payment method updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'

  /scenarios:
    get:
      summary: Get list of scenarios
      responses:
        '200':
          description: List of scenarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComparisonScenario'


  /scenarios/{scenarioId}:
    put:
      summary: Update a scenario
      parameters:
        - in: path
          name: scenarioId
          schema:
            type: integer
          required: true
          description: Scenario ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComparisonScenario'
      responses:
        '200':
          description: Scenario updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComparisonScenario'

  /favorites:
    post:
      summary: Register a favorite set
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteSet'
      responses:
        '201':
          description: Favorite set registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteSet'

  /favorites/{userId}:
    get:
      summary: Get favorite sets for a user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '200':
          description: List of favorite sets retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoriteSet'

  /favorites/comparison:
    post:
      summary: Register a favorite set comparison result
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteSetComparison'
      responses:
        '201':
          description: Favorite set comparison result registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteSetComparison'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
        zipcode:
          type: string
        prefecture:
          type: string
        address:
          type: string
        telephone:
          type: string

    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    Item:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        imagePath:
          type: string

    Top:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        imagePath:
          type: string
        deleted:
          type: boolean

    Bottom:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        imagePath:
          type: string
        deleted:
          type: boolean

    Set:
      type: object
      properties:
        id:
          type: integer
        topId:
          type: integer
        bottomId:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        imagePath:
          type: string
    
    ItemAllResponse:
      type: object
      properties:
        set:
          type: array
          items: 
            $ref: '#/components/schemas/Set'
        top:
          type: array
          items: 
            $ref: '#/components/schemas/Top'
        buttom:
          type: array
          items:
            $ref: '#/components/schemas/Bottom'

    ItemTypeResponse:
      type: object
      properties:
        items:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Set'
              - $ref: '#/components/schemas/Top'
              - $ref: '#/components/schemas/Bottom'

    
    ItemDetailResponse:
      type: object
      properties:
        item:
          oneOf:
            - $ref: '#/components/schemas/Set'
            - $ref: '#/components/schemas/Top'
            - $ref: '#/components/schemas/Bottom'
      
    Inventory:
      type: object
      properties:
        id:
          type: integer
        itemId:
          type: integer
        itemType:
          type: string
        stockQuantity:
          type: integer

    Order:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        status:
          type: string
          enum: [BEFORE_ORDER, UNPAID, PAID, SHIPPED, DELIVERED, CANCELED]
        totalPrice:
          type: integer
        orderDate:
          type: string
          format: date-time
        paymentMethodId:
          type: integer
        deliveryDate:
          type: string
          format: date
        addressId:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      properties:
        id:
          type: integer
        orderId:
          type: integer
        itemId:
          type: integer
        itemType:
          type: string
          enum: [TOP, BOTTOM, SET]
        quantity:
          type: integer
        size:
          type: string

    OrderStatusUpdate:
      type: object
      properties:
        status:
          type: string
          enum: [BEFORE_ORDER, UNPAID, PAID, SHIPPED, DELIVERED, CANCELED]

    PaymentMethod:
      type: object
      properties:
        id:
          type: integer
        methodName:
          type: string

    ComparisonScenario:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        imagePath:
          type: string
        timeOfDay:
          type: string
          enum: [DAY, NIGHT]
        weather:
          type: string
          enum: [SUNNY, RAINY]
        location:
          type: string
          enum: [OFFICE, OUTDOOR]

    FavoriteSet:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        setId:
          type: integer
        createdAt:
          type: string
          format: date-time

    FavoriteSetComparison:
      type: object
      properties:
        id:
          type: integer
        favoriteSetId:
          type: integer
        comparisonScenarioId:
          type: integer
        comparisonResult:
          type: string
